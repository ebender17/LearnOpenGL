/*********************************OpenGL Notes*********************************/
- OpenGL is a state machine. Must bind (or select) buffer before it can be rendered. Think about how 
layers operated in Photoshop. Layer must be selected to do work on said layer. 

- Basic rendering pipeline: Draw call -> Vertex Shader -> Fragment Shader

- Vertex is composed of many attributes: position, colors, normal

/*********************************Shaders*********************************/
- Shaders: Programs ran on GPU. 

- Vertex Shader: Called for each vertex (ex. called three times for a triangle). 
- Primary purpose is to tell OpenGL where you want the vertex
to be in the window. Also used to pass attributes into next stage (Fragment Shader)

- Fragment Shader: Runs once for each pixel that needs to be rasterized. Decides the correct color the 
pixel needs to be. 

- Keep in mind: Better to perform calculations in vertex shader if possible (as it is less called less). 
Sometime cannot avoid calculations in Fragment Shader however (such as lighting). 


/*********************************Index Buffers*********************************/

- GPUs use triangles as their drawing primatives. Therefore, rectangles are composed of two triangles. However, 
- this causes vertices to be stored more than once (duplicated). Can avoid this memory waste using index buffers. 

- Index buffers: Allow one to reuse vertices. 


/*********************************Uniforms*********************************/
- Uniforms: Set per draw. Allows us to set shader data in C++


/*********************************Vertex Arrays*********************************/

- Unique to OpenGL. 
- Definition: Bind Vertex Buffers with layout. 
- Without Vertex Arrays would have to complete the following before each draw: 
	Bind Shaders 
	Setup Uniforms 
	Bind Vertex Buffer (*)
	Setup Layout of Vertex Buffer (*)
	Bind index buffer 
	Draw 
- Vertex Array Object (VAO) contains binding between Vertex Buffer(s) (VBO) and the layout specification. 
- The * steps above become binding the VAO as the VBO is linked to the VAO. 

- OpenGL comability profile creates a VAO for us by default. Whereas the core profile does not. Therefore, we need to create a VAO ourselves
and bind it if using this profile. Technically VAOs are mandatory. 

Two approaches to VAO: 
	1. One global VAO for the entire program and then bind different buffers and different vertex specifications everytime. 
	2. Have a seperate VAO for each unique piece of geometry. 

Which one is more optimal?
	In the past, Nvida said approach 1 was better. However, it depends. With current drivers it may depend on your platform. Using muliple VAOs is what OpenGL recommends.

/*********************************Vertex Buffers and Arrays*********************************/
Vertex buffers are just buffers with data. No concept such as, "the first three numbers are a position and they are floats" etc, etc. 
Vertex Arrays are for tying the vertex buffer with a layout. 
Vertex Arrays are also useful if we want to read the vertex buffer data on the CPU side. We need vertex arrays to make use of the data.  

/*********************************Renderer*********************************/
Think of the Renderer as a factory. Takes in all parts (Vertex Buffer, Index Buffer, Shader) and draws what it wanted on screen. 

Do not call Unbind in draw call in Renderer as unbinding is a waste of performance. By the time we unbind, we will have to bind 
everything again for the next draw. In complex systemes, Unbinding is called during debug config to help with debugging and 
stripped in release. 

Renderer Draw call typically takes in Vertex Buffer, Index Buffer, and a Material (not a Shader). 
- Material: Shader and its uniforms (data)

/*********************************Textures*********************************/
1. Load image into CPU memory in order to send to OpenGL
2. Create texture in OpenGL
3. Bind texture when it is time to render
4. Modify shader to bind to the texture slot
5. Sample texture in shader 

In OpenGL we have various slots that we can bind textures to. The reason this exists is we have the ability to bind more than one texture at once. 
The number of slots depends on the GPU and their implementation of OpenGL. 

Need to tell shader whitch texture slot to sample from. This is done with a uniform. This is not really an integer slot, it is done with something 
called a sampler slot. Basically what we need to do is send an integer uniform to our shader and that integer is the slot that we have bound our 
texture to that we want to sample from. In the shader code we can use that sampler or the integer we have passed in to sample the texture.

Need to use texture coordinate system to tell our geometry we are rendering which part of the texture to sample from. Fragment shader goes through 
the rectangle and draws every pixel. When it is up to rendering a certain pixel, need to teel renderer to sample a certain area of the texture to 
retrieve what color the pixel should be. 
	-> Basically need to say the bottom left of our rectangle on our screen is coord (0, 0) and the top right is the other end of the texture (1, 1).
	-> Do not tie textures to a resolution. Could be any size, we just need to specific an area of the texture sample. Fragment shader will interpolate
	between vertices. 

/*********************************Textures*********************************/
What is blending?
	-Blending in OpenGL can be thought of as allowing transparency
	-Blending determines how we combine our output color with what is already in our target buffer. 
	-Output = the color we output from our fragment shader (known as source)
	-Target buffer = the buffer our fragment shader is drawing to (known as destination)
How do we control blending?
	1. glEnable(GL_BLEND) - glDisable(GL_BLEND)- By default, OpenGL does not enable blending.
	2. glBlendFunc(src, dest)
		-src = how the src RGBA factor is computed (default is GL_ONE) 
		When the factor is GL_ONE we take our source RGBA channels all seperately and mult by one. This means
		whatever the source is does not change.  
		-dest = how the dest RGBA factor is computed (default is GL_ZERO)
		When the factor is GL_ZERO we take dest RGBA channels all seperately and mult by zero. This means everything
		in dest will be replaced by src. 
	3. glBlendEquation(mode)
		- mode = how we combine the src and dest colors
		Default value is GL_FUNC_ADD
	So what this means by default is: 
		1 + 0 = 1
		Use the source value

Example: 
	-src = GL_SRC_ALPHA 
	-dest = GL_ONE_MINUS_SRC_ALPHA
	
	So if the pixel we are rendering from our texture is transparent:
	-src alpha = 0 
	-dest = 1 - 0 = 1
	Which means "use the destination color" - the color that's already in the buffer 
	R = (rsrc * 0) + (rdest * (1 - 0)) = rdest
	G = (rsrc * 0) + (rdest * (1 - 0)) = rdest
	B = (rsrc * 0) + (rdest * (1 - 0)) = rdest
	A = (rsrc * 0) + (rdest * (1 - 0)) = rdest
Another Example:
	Our pixel is partially transparents, let's say (1.0, 1.0, 1.0, 0.5) (RGBA)
	-So it is white but translucent 
	Our dest buffer is cleared to magenta (1.0, 0.0, 1.0, 1.0)
	
	So using the blend setting from the example above: 
	R = (1.0 * 0.5) + (1.0 * (1 - 0.5)) = 1.0
	G = (1.0 * 0.5) + (0.0 * (1 - 0.5)) = 0.5
	B = (1.0 * 0.5) + (1.0 * (1 - 0.5)) = 1.0
	A = (0.5 * 0.5) + (1.0 * (1 - 0.5)) = 0.75
		